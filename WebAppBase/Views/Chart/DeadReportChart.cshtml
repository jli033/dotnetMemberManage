@using WebAppBase.App_GlobalResources
@using System.Text
@model WebAppBase.Models.Chart.ChartTargetModel
@{
    ViewBag.Title = "ShowChartPage";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var labels= new  StringBuilder();
    foreach (var lab in Model.Labels)
    {
        if (labels.Length == 0)
        {
            labels.AppendFormat("'{0}'", lab);
        }
        else {
            labels.AppendFormat(",'{0}'", lab);
        }
    }
}

@section Style
{
    <style>
        canvas {
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
        }
    </style>

    <style type="text/css">
        .ChartAxis {
            width: 150px;
        }
    </style>
}


@section PrepareScriptBeforeRequestJS{
    <!--Chart.js-->
    <script src="@Url.Content("~/Contents/ChartJS/2.3.0/Chart.bundle.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Contents/ChartJS/hammer.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Contents/ChartJS/Chart.Zoom.js")" type="text/javascript"></script>
}

<h2>@Model.Title</h2>
@using (Html.BeginForm())
{
    <div style="margin-top:5px; text-align:right;">
        @if (Model.ZoomEnable)
        {
            <input id="btnResetZoom" name="btnResetZoom" style="width:80px;" type="button" value="リセット" />
        }
        @if (Model.ChartTypes.Length > 1 && Model.ChartTypes.Contains("line"))
        {
            <input id="btnGraphLineType" name="btnGraphLineType" class="btnBarType" bartype="line" style="width:80px;" type="button" value="折れ線" />
        }
        @if (Model.ChartTypes.Length > 1 && Model.ChartTypes.Contains("bar"))
        {
            <input id="btnGraphBarType" name="btnGraphBarType" class="btnBarType" bartype="bar" style="width:80px;" type="button" value="棒グラフ" />
        }
        <input id="btnBack" name="back" style="width:80px;" type="submit" value="戻る" />
    </div>

    <div>
        <table id="searchCondition" style="margin-top:10px; margin-bottom:10px;float:left;">
            <tr>
                <td valign="middle">
                    <span style="padding-right:10px;">生簀</span>
                </td>
                @if (Model.ChartYAxisLables.Count > 0)
                {
                    var i = 0;
                    var dic = Model.ChartYAxisLables[i];
                    var j = 0;
                    <td valign="middle">
                        <select id="@string.Format("ChartAxis{0}",i)" data-axisindex="@i" class="ChartAxis">
                            @foreach (var kv in dic)
                            {
                                if (j++ == i)
                                {
                                    <option value="@kv.Key" selected="selected">@kv.Value</option>
                                }
                                else
                                {
                                    <option value="@kv.Key">@kv.Value</option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <input id="btnAddData" name="btnAddData" style="width:80px;margin-left:5px;" type="button"  value="追加" />
                    </td>
                    <td>
                        <input id="btnClear" name="btnClear" style="width:80px;margin-left:5px;" type="button" value="クリア" />
                    </td>
                }
            </tr>
        </table>
        <div style="clear:both;"></div>
    </div>
    <div style="width:100%;margin:0 auto;" id="canvasDiv">
        <canvas id="canvas"></canvas>
    </div>

}

@section Script{
    <script type="text/javascript">
        var ticksMax=1;
        var ticks;

    function adjustHeight() {
        //debugger;
        var windowHeight = getWindowHeight();
        var widdowWidth = $("#main").innerWidth();//  getWindowWidth();
        console.log(widdowWidth);
        var footerHeight = $("footer").outerHeight(true);
        var maxWidth = widdowWidth;
        var maxHeight = windowHeight - footerHeight - 200;
        if (maxWidth >= maxHeight * 2) {
            maxWidth = maxHeight * 2;
        }
        else {
            maxHeight =Math.min( maxHeight, maxWidth / 2);
        }

        $("#canvasDiv").css("height", maxHeight);
        $("#canvasDiv").css("width", maxWidth);
    };

    $(function () {

        adjustHeight();
        $(window).resize(adjustHeight);

        var ctx = document.getElementById("canvas").getContext("2d");
        window.myBar = new Chart(ctx, barConfig);

        $("select").wijcombobox();
        $("#btnResetZoom").click(resetZoom);
        $(".btnBarType").click(function () {
            setChartType($(this).attr('bartype'));
        });

        //$(".ChartAxis").change(InitChartData);
        $("#btnAddData").click(AddChartData);
        $("#btnClear").click(clearChartData)
        //InitChartData();
    });
    function resetZoom() {
        @if (!string.IsNullOrEmpty( Model.XAxesType) && !string.IsNullOrEmpty( Model.XAxesTimeUnit)){
            @Html.Raw(string.Format(@"
        window.myBar.scales['x-axis-0'].options.time.unitStepSize ={0};", Model.XAxesUnitStepSize))
        }        
        window.myBar.resetZoom();
    }

    function clearChartData()
    {
        barChartData.datasets.length=0;
        tickMax=1;
        barConfig.options.scales['yAxes'][0].ticks.max=tickMax;
        window.myBar.update();
    }

    function setChartType(type) {
        if (barConfig.type == type)
        {
            return;
        }
        barConfig.type = type;
        window.myBar.resetZoom();
    }

    function InitChartData() {
        //debugger;
        var url = '@Url.Action("InitChart", "Chart")';
        var axis = new Array();
        for (var i = 0; i < $(".ChartAxis").length; i++) {
            var cmb = $($(".ChartAxis")[i]);
            var obj = { Index: cmb.attr("data-axisindex"), Key: cmb.val() };
            axis.push(obj);
        }
        var postData = { ChartAxis: axis };
        $.post(url, postData, function (r) {
            //debugger;
            barChartData.labels = r.barConfig.data.labels;
            //barChartData.datasets = r.barConfig.data.datasets;

            //barOptions.responsive = r.barConfig.options.responsive;
            //barOptions.hoverMode = r.barConfig.options.hoverMode;
            //barOptions.hoverAnimationDuration = r.barConfig.options.hoverAnimationDuration;
            //barOptions.stacked = r.barConfig.options.stacked;

            //barOptions.title = r.barConfig.options.title;
            //barOptions.scales = {};
            //if (r.barConfig.options.scales.xAxes != null)
            //{
            //    barOptions.scales.xAxes = r.barConfig.options.scales.xAxes;
            //}
            //barOptions.scales.yAxes = r.barConfig.options.scales.yAxes;
            //if (r.barConfig.options.zoom != null) {
            //    barOptions.zoom = r.barConfig.options.zoom;
            //}

            //barConfig.type = r.barConfig.type;
            barConfig.data = barChartData;
            //barConfig.options = barOptions;

            window.myBar.destroy();
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myBar = new Chart(ctx, barConfig);
        });
    }

        function AddChartData() {
            //debugger;
            var cmb = $("#ChartAxis0");
            var DataKey = cmb.val();
            var exists = false;
            for (var i = 0; i < barChartData.datasets.length; i++) {
                var ds = barChartData.datasets[i];
                if (ds.DataKey == DataKey)
                {
                    exists = true;
                    break;
                }
            }
            if (exists) {
                return;
            }

            var url = '@Url.Action("GetChartData", "Chart")';
            var postData = { DataKey: cmb.val(), lineIdx: barChartData.datasets.length };
            $.post(url, postData, function (r) {
                //debugger;
                barChartData.datasets.push(r.dataset);
                barConfig.data = barChartData;
                tickMax= barConfig.options.scales['yAxes'][0].ticks.max || 1;
                tickMax=Math.max(tickMax, r.ticksMax);
                barConfig.options.scales['yAxes'][0].ticks.max=tickMax;
                //window.myBar.scales['y-axis-0'].max=tickMax;
                console.log(barConfig.options.scales['yAxes'][0].ticks.max);
                window.myBar.update();
            });
        }


    </script>
    <script>
    var randomScalingFactor = function () {
        return Math.abs((Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100));
    };
    var randomColorFactor = function () {
        return Math.round(Math.random() * 255);
    };
    var randomColor = function () {
        return 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor() + ',.7)';
    };

    var barChartData = {
        labels: [@Html.Raw(labels)],
        datasets: []
    };

    var barOptions = {
        responsive: true,
        hoverMode: 'index',
        hoverAnimationDuration: 400,
        stacked: false,
        onClick: function (o, e) {
            if (window.myBar.scales["x-axis-0"].scaleSizeInUnits != null) {
                console.log(window.myBar.scales["x-axis-0"].scaleSizeInUnits);
                window.myBar.scales["x-axis-0"].options.time.unitStepSize = parseInt(Math.max(1, window.myBar.scales["x-axis-0"].scaleSizeInUnits / 10));
                window.myBar.update(0);
            }
        },
        title: {
            display: false,
            text: "@Model.Title"
        },
        scales: {
            xAxes: [{
                type: "time",
                time: {
                    unit: 'day',
                    unitStepSize: @Model.XAxesUnitStepSize,
                    displayFormats: {
                        day: 'YYYY/MM/DD'
                    }
                },
                ticks: {
                    maxRotation: 60,
                }
            }],
            yAxes: [{
                type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                display: true,
                position: "left",
                ticks:{                    
                    min:0
                },
                scaleLabel: {
                    display: true,
                    labelString: '斃死数'
                },
                gridLines:{
                    drawOnChartArea:true
                },
                id: "y-axis-0",
            }],
        },
        zoom: {
            enabled: true,
            drag: true,
            mode: 'x',
            limits: {
                max: 10,
                min: 0.5
            }
        },
        legend: {
            display: true,
            labels: {
                fontFamily: 'メイリオ',
                fontSize: 14
            }
        }
    };

    var barConfig={
        type: '@Model.ChartTypes[0]',
        data: barChartData,
        options: barOptions
    };

    </script>
}